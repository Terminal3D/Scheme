(load "ssa.rkt")
(load "test.scm")

(define ie (interaction-environment))

(define-syntax mderivative-test
  (syntax-rules ()
    ((mderivative-test argument expected call-arg)
     (test (eval `(let* ((f (lambda (x) (mderivative argument)))
                         (x call-arg))
                    (f x))
                 ie)
           (eval `(let ((x call-arg))
                    expected)
                 ie)))))

(define PI (* 4 (atan 1)))

(display "\n-=РОБОТ-ПРОВЕРЯЛЬЩИК ВЫПОЛНЯЕТ ТЕСТЫ ДЛЯ ПРОИЗВОДНОЙ=-\n\n")


(define (der-cube x)
  (mderivative (expt x 3)))


(define tests
  (list (test (der-cube 10) 300)
        (mderivative-test 2 0 10)
        (mderivative-test x 1 10)
        (mderivative-test (- x) -1 10)
        (mderivative-test (* 1 x) 1 10)
        (mderivative-test (* -1 x) -1 10)
        (mderivative-test (* -4 x) -4 10)
        (mderivative-test (* x 10) 10 10)
        (mderivative-test (- (* 2 x) 3) 2 10)
        (mderivative-test (expt x 10) (* 10 (expt x 9)) 10)
        (mderivative-test (* 2 (expt x 5)) (* 10 (expt x 4)) 10)
        (mderivative-test (expt x -2) (* -2 (expt x -3)) 10)
        (mderivative-test (expt 5 x) (* (log 5) (expt 5 x)) 10)
        (mderivative-test (cos x) (- (sin x)) (/ PI 2))
        (mderivative-test (sin x) (cos x) 0)
        (mderivative-test (exp x) (exp x) 10)
        (mderivative-test (* 2 (exp x)) (* 2 (exp x)) 10)
        (mderivative-test (* 2 (exp (* 2 x))) (* 4 (exp (* 2 x))) 10)
        (mderivative-test (log x) (/ 1 x) 7)
        (mderivative-test (* (log x) 3) (/ 3 x) 7)
        (mderivative-test (+ (expt x 3) (* x x)) (+ (* 3 x x) (* 2 x)) 10)
        (mderivative-test (- (* 2 (expt x 3)) (* 2 (expt x 2)))
                          (- (* 6 x x) (* 4 x))
                          10)
        (mderivative-test (/ 3 x) (/ -3 (* x x)) 7)
        (mderivative-test (/ 3 (* 2 (expt x 2))) (/ -3 (expt x 3)) 7)
        (mderivative-test (* 2 (sin x) (cos x))
                          (* 2 (cos (* 2 x)))
                          (/ PI 3))
        (mderivative-test (* 2 (exp x) (sin x) (cos x))
                          (* (exp x) (+ (* 2 (cos (* 2 x))) (sin (* 2 x))))
                          0)
        (mderivative-test (cos (* 2 (expt x 2)))
                          (* -4 x (sin (* 2 (expt x 2))))
                          5)
        (mderivative-test (sin (log (expt x 2)))
                          (/ (* 2 (cos (log (expt x 2)))) x)
                          15)
        (mderivative-test (+ (sin (+ x x)) (cos (* x 2 x)))
                          (+ (* 2 (cos (* 2 x)))
                             (* -4 (sin (* x 2 x)) x))
                          10)
        (mderivative-test (* (sin (+ x x)) (cos (* x 2 x)))
                          (+ (* (- 1 (* 2 x)) (cos (* 2 x (- 1 x))))
                             (* (+ 1 (* 2 x)) (cos (* 2 x (+ 1 x)))))
                          5)))

; Если будут проблемы, связанные с округлением, пишите, тест уточню.

(define **test-succeed-29553** (run-tests tests))
