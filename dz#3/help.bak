(define ie (interaction-environment))
(define (delem dxs)
    
    (define expr (cond
                   ((pair? dxs) (car dxs))
                   ((and (not (pair? dxs)) (not (null? dxs))) dxs)
                   (else 'Error)))
                      
    (cond ((number? expr) 0)
          ((equal? expr 'x) 1)
          ((equal? expr '-x) -1)
          ((equal? expr '*) (if (<= (length (cdr dxs)) 2)
                                `(+ (* ,(delem (cadr dxs)) ,(caddr dxs)) (* ,(cadr dxs) ,(delem (caddr dxs))))
                                `(* ,(cadr dxs) ,(delem (cons '* (cddr xs)))))
                                
                            




                            )


        
          ((equal? expr '/) `(/ (- (* ,(delem (cadr dxs)) ,(caddr dxs)) (* ,(cadr dxs) ,(delem (caddr dxs)))) (* ,(caddr dxs) ,(caddr dxs))))
          ((equal? expr 'x) 1)
          ((equal? expr '+) `(+ ,(delem (cadr dxs)) ,(delem (caddr dxs))))))