(load "test.scm")
(load "trace.scm")

(define (to-bin expr)
  (define sign (car expr))
  (let loop ((l-in (cdr expr)))
    (if (> (length l-in) 2)
        (cons sign (cons (car l-in) (list (loop (cdr l-in)))))
        (if (= (length expr) 3)
            expr
            `(,sign ,(car l-in) ,(cadr l-in))))))
  
  

(define (derivative expr)
  (define head (if (list? expr)
                   (car expr)
                   expr))
  (cond
    ((equal? head 'x) 1)
    ((number? head) 0)
    
    ((equal? head 'expt) (if (number? (caddr expr))
                             `(* ,(derivative (cadr expr)) (* ,(caddr expr) (expt ,(cadr expr) ,(- (caddr expr) 1))))
                             `(* ,(derivative (caddr expr)) (* (log ,(cadr expr)) (expt ,(cadr expr) ,(caddr expr))))))
    ((equal? head 'exp) `(* ,(derivative (cadr expr)) (exp ,(cadr expr))))
    ((equal? head 'sin) `(* ,(derivative (cadr expr)) (cos ,(cadr expr))))
    ((equal? head 'cos) `(* -1 (* ,(derivative (cadr expr)) (sin ,(cadr expr)))))
    ((equal? head 'log) `(/ ,(derivative (cadr expr)) ,(cadr expr)))
    ((equal? head '+) `(+ ,(derivative (cadr (to-bin expr))) ,(derivative (caddr (to-bin expr)))))
    ((equal? head '*) (let ((bin (to-bin expr)))
                        `(+ (* ,(derivative (cadr bin)) ,(caddr bin)) (* ,(cadr bin) ,(derivative (caddr bin))))))
    ((equal? head '-) (if (= (length expr) 2)
                          (list '- (derivative (cdr expr)))
                          (let ((bin (to-bin expr)))
                            `(- ,(derivative (cadr bin)) ,(derivative (caddr bin))))))
    ((equal? head '/) `(/ (- (* ,(derivative (cadr expr)) ,(caddr expr)) (* ,(cadr expr) ,(derivative (caddr expr)))) (expt ,(caddr expr) 2)))
    ))



(define ie (interaction-environment))

(define-syntax derivative-test
  (syntax-rules ()
    ((derivative-test argument expected call-arg)
     (test (round_1e-6 (eval `(let ((x call-arg))
                                ,(derivative 'argument))
                             ie))
           (round_1e-6 (eval '(let ((x call-arg))
                                expected)
                             ie))))))

(define PI (* 4 (atan 1)))

(define (round_1e-6 x)
  (/ (round (* x 1e6)) 1e6))


(display "\n-=РОБОТ-ПРОВЕРЯЛЬЩИК ВЫПОЛНЯЕТ ТЕСТЫ ДЛЯ ПРОИЗВОДНОЙ=-\n\n")


(define tests
  (list (derivative-test 2 0 10.13820)
        (derivative-test x 1 10.13820)
        (derivative-test (- x) -1 10.13820)
        (derivative-test (* 1 x) 1 10.13820)
        (derivative-test (* -1 x) -1 10.13820)
        (derivative-test (* -4 x) -4 10.13820)
        (derivative-test (* x 10) 10 10.13820)
        (derivative-test (- (* 2 x) 3) 2 10.13820)
        (derivative-test (expt x 10) (* 10 (expt x 9)) 10.13820)
        (derivative-test (* 2 (expt x 5)) (* 10 (expt x 4)) 10.13820)
        (derivative-test (expt x -2) (* -2 (expt x -3)) 10.13820)
        (derivative-test (expt 5 x) (* (log 5) (expt 5 x)) 10.13820)
        (derivative-test (cos x) (- (sin x)) (/ PI 2))
        (derivative-test (sin x) (cos x) 0)
        (derivative-test (sin x) (cos x) 0.13820)
        (derivative-test (exp x) (exp x) 10.13820)
        (derivative-test (* 2 (exp x)) (* 2 (exp x)) 10.13820)
        (derivative-test (* 2 (exp (* 2 x))) (* 4 (exp (* 2 x))) 10.13820)
        (derivative-test (log x) (/ 1 x) 7.13820)
        (derivative-test (* (log x) 3) (/ 3 x) 7.13820)
        (derivative-test (+ (expt x 3) (* x x)) (+ (* 3 x x) (* 2 x)) 10.13820)
        (derivative-test (- (* 2 (expt x 3)) (* 2 (expt x 2)))
                         (- (* 6 x x) (* 4 x))
                         10.13820)
        (derivative-test (/ 3 x) (/ -3 (* x x)) 7.13820)
        (derivative-test (/ 3 (* 2 (expt x 2))) (/ -3 (expt x 3)) 7.13820)
        (derivative-test (* 2 (sin x) (cos x))
                         (* 2 (cos (* 2 x)))
                         (/ PI 3))
        (derivative-test (* 2 (exp x) (sin x) (cos x))
                         (* (exp x) (+ (* 2 (cos (* 2 x))) (sin (* 2 x))))
                         0.13820)
        (derivative-test (cos (* 2 (expt x 2)))
                         (* -4 x (sin (* 2 (expt x 2))))
                         5.13820)
        (derivative-test (sin (log (expt x 2)))
                         (/ (* 2 (cos (log (expt x 2)))) x)
                         15.13820)
        (derivative-test (+ (sin (+ x x)) (cos (* x 2 x)))
                         (+ (* 2 (cos (* 2 x))) (* -4 (sin (* x 2 x)) x))
                         10.13820)
        (derivative-test (* (sin (+ x x)) (cos (* x 2 x)))
                         (+ (* (- 1 (* 2 x)) (cos (* 2 x (- 1 x))))
                            (* (+ 1 (* 2 x)) (cos (* 2 x (+ 1 x)))))
                         5.13820)))

(define **test-succeed-13820** (run-tests tests))
